{{define "javascript/interfaces"}}// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT
import $ from 'jquery'
var api = {};

(function(api, $ ) {
	api.rpc = function(endpoint, input, callback) {
		var methodUrl = api.baseurl + endpoint;
		var message = JSON.stringify(input);
		var req = $.ajax({
			type: "POST",
			url: methodUrl,
			contentType:"application/json; charset=utf-8",
			dataType:"json",
			processData: false,
			data: message
		});
		req.done(function(data, textStatus, jqXHR) {
			callback(data);
		});
	};
	api.rpcjsonp = function(endpoint, input, callback) {
		var methodUrl = api.baseurl + endpoint;
		var message = JSON.stringify(input);
		var req = $.ajax({
			type: "GET",
			url: methodUrl,
			crossDomain: true,
			contentType:"application/javascript; charset=utf-8",
			dataType:"jsonp",
			data: "data="+message
		});
		req.done(function(data, textStatus, jqXHR) {
			callback(data);
		});
	};
})( api, $);



(function( api ) {
	api.jsonp = {}
{{range .Interfaces}}{{ $interfaceName := .Name}}
	api.{{$interfaceName}} = function() {};
	api.jsonp.{{$interfaceName}} = function() {};
{{range .Methods}}{{$method := .}}{{if .ConstructorForInterface}}
	api.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}) {
		var r = new api.{{.ConstructorForInterface.Name}}(){{range .Params}};
		r.{{.Name | title}} = {{.Name}}{{end}};
		return r;
	};
	api.jsonp.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}) {
		var r = new api.jsonp.{{.ConstructorForInterface.Name}}(){{range .Params}};
		r.{{.Name | title}} = {{.Name}}{{end}};
		return r;
	};
{{else}}
	api.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}{{if $method.ParamsForJavascriptFunction}}, {{end}}callback) {
		api.rpc("/{{$interfaceName}}/{{.Name}}.json", {"This": this, "Params": {{$method.ParamsForJson}}}, function(data){
			callback({{$method.ResultsForJavascriptFunction "data"}})
		});
		return;
	};
	api.jsonp.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}{{if $method.ParamsForJavascriptFunction}}, {{end}}callback) {
		api.rpcjsonp("/{{$interfaceName}}/{{.Name}}.json", {"This": this, "Params": {{$method.ParamsForJson}}}, function(data){
			callback({{$method.ResultsForJavascriptFunction "data"}})
		});
		return;
	};
{{end}}{{end}}{{end}}

}( api ));

export default api;
{{end}}
